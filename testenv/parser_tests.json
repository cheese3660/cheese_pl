[
  [
    "primitive types: bool",
    "def x: bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": "bool"
        }
      ]
    }
  ],
  [
    "primitive types: i1",
    "def x: i1",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "int_type",
            "size": 1
          }
        }
      ]
    }
  ],
  [
    "primitive types: i64",
    "def x: i64",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "int_type",
            "size": 64
          }
        }
      ]
    }
  ],
  [
    "primitive types: i65535",
    "def x: i65535",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "int_type",
            "size": 65535
          }
        }
      ]
    }
  ],
  [
    "primitive types: u1",
    "def x: u1",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "uint_type",
            "size": 1
          }
        }
      ]
    }
  ],
  [
    "primitive types: u64",
    "def x: u64",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "uint_type",
            "size": 64
          }
        }
      ]
    }
  ],
  [
    "primitive types: u65535",
    "def x: u65535",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "uint_type",
            "size": 65535
          }
        }
      ]
    }
  ],
  [
    "primitive types: f32",
    "def x: f32",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "f32_type"
          }
        }
      ]
    }
  ],
  [
    "primitive types: f64",
    "def x: f64",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "f64_type"
          }
        }
      ]
    }
  ],
  [
    "primitive types: c32",
    "def x: c32",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "c32_type"
          }
        }
      ]
    }
  ],
  [
    "primitive types: c64",
    "def x: c64",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "c64_type"
          }
        }
      ]
    }
  ],
  [
    "primitive types: opaque",
    "def x: opaque",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "opaque_type"
          }
        }
      ]
    }
  ],
  [
    "primitive types: void",
    "def x: void",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "void_type"
          }
        }
      ]
    }
  ],
  [
    "primitive types: comptime_float",
    "def x: comptime_float",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "comptime_float"
          }
        }
      ]
    }
  ],
  [
    "primitive types: comptime_complex",
    "def x: comptime_complex",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "comptime_complex"
          }
        }
      ]
    }
  ],
  [
    "primitive types: comptime_int",
    "def x: comptime_int",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "comptime_int"
          }
        }
      ]
    }
  ],
  [
    "primitive types: comptime_string",
    "def x: comptime_string",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "comptime_string"
          }
        }
      ]
    }
  ],
  [
    "primitive types: noreturn",
    "def x: noreturn",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "noreturn_type"
          }
        }
      ]
    }
  ],
  [
    "primitive types: type",
    "def x: type",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "type_type"
          }
        }
      ]
    }
  ],
  [
    "primitive values: true",
    "let x = true",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "true"
          }
        }
      ]
    }
  ],
  [
    "primitive values: false",
    "let x = false",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "false"
          }
        }
      ]
    }
  ],
  [
    "primitive values: none",
    "let x = none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "none"
          }
        }
      ]
    }
  ],
  [
    "string literals",
    "let x = \"this is a string literal\"",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "string",
            "str": "this is a string literal"
          }
        }
      ]
    }
  ],
  [
    "mutable assignment",
    "let x mut = 5",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x",
            "flags": [
              "mutable"
            ]
          },
          "value": {
            "type": "int",
            "value": 5
          }
        }
      ]
    }
  ],
  [
    "destructuring",
    "let{a: (x mut, y, z),b:w,c:_}=a",
    {
      "type": "struct",
      "children": [
        {
          "type": "destructure",
          "structure": {
            "type": "structure_destructure",
            "children": {
              "a": {
                "type": "tuple_destructure",
                "children": [
                  {
                    "type": "var_def",
                    "flags": [
                      "mutable"
                    ],
                    "name": "x"
                  },
                  {
                    "type": "var_def",
                    "name": "y"
                  },
                  {
                    "type": "var_def",
                    "name": "z"
                  }
                ]
              },
              "b": {
                "type": "var_def",
                "name": "w"
              },
              "c": {
                "type": "underscore"
              }
            }
          },
          "value": {
            "type": "ref",
            "name": "a"
          }
        }
      ]
    }
  ],
  [
    "structure literals: explicit/object calls",
    "let x=p{a:false,b:false}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "object_call",
            "object": {
              "type": "ref",
              "name": "p"
            },
            "args": {
              "a": {
                "type": "false"
              },
              "b": {
                "type": "false"
              }
            }
          }
        }
      ]
    }
  ],
  [
    "structure literals: implicit",
    "let x=.{a:false,b:false}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "object_literal",
            "children": {
              "a": {
                "type": "false"
              },
              "b": {
                "type": "false"
              }
            }
          }
        }
      ]
    }
  ],
  [
    "tuple types",
    "let p=struct(bool,bool)",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "tuple": true,
            "children": [
              {
                "type": "bool"
              },
              {
                "type": "bool"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "tuple literals: explicit/function calls",
    "let x=p(false,false)",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "tuple_call",
            "object": {
              "type": "ref",
              "name": "p"
            },
            "args": [
              {
                "type": "false"
              },
              {
                "type": "false"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "tuple literals: implicit",
    "let x=.(false,false)",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "tuple_literal",
            "children": [
              {
                "type": "false"
              },
              {
                "type": "false"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "empty structure type",
    "let p=struct",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct"
          }
        }
      ]
    }
  ],
  [
    "enumerations",
    "let e=enum{E=0,I(i32),B{x:i32,y:i32}}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "e"
          },
          "value": {
            "type": "enum",
            "children": [
              {
                "type": "enum_constant",
                "name": "E",
                "value": {
                  "type": "int",
                  "value": 0
                }
              },
              {
                "type": "enum_constant",
                "name": "I",
                "tuple": true,
                "children": [
                  {
                    "type": "int_type",
                    "size": 32
                  }
                ]
              },
              {
                "type": "enum_constant",
                "name": "B",
                "children": [
                  {
                    "type": "field",
                    "name": "x",
                    "field_type": {
                      "type": "int_type",
                      "size": 32
                    }
                  },
                  {
                    "type": "field",
                    "name": "y",
                    "field_type": {
                      "type": "int_type",
                      "size": 32
                    }
                  }
                ]
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "enumeration constants",
    "let x=.E",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "enum_literal",
            "name": "E"
          }
        }
      ]
    }
  ],
  [
    "reference types: mutable",
    "def x:*bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "reference",
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "reference types: immutable",
    "def x:*~bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "reference",
            "constant": true,
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "array types: known single dimension mutable",
    "def x:[1]bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "array_type",
            "dimensions": [
              {
                "type": "int",
                "value": 1
              }
            ],
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "array types: known single dimension immutable",
    "def x:[1]~bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "array_type",
            "constant": true,
            "dimensions": [
              {
                "type": "int",
                "value": 1
              }
            ],
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "array types: known multi dimension mutable",
    "def x:[1,1]bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "array_type",
            "dimensions": [
              {
                "type": "int",
                "value": 1
              },
              {
                "type": "int",
                "value": 1
              }
            ],
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "array types: known multi dimension immutable",
    "def x:[1,1]~bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "array_type",
            "constant": true,
            "dimensions": [
              {
                "type": "int",
                "value": 1
              },
              {
                "type": "int",
                "value": 1
              }
            ],
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "array types: unknown single dimension mutable",
    "def x:[?]bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "array_type",
            "dimensions": [
              "unknown_size"
            ],
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "array types: unknown single dimension immutable",
    "def x:[?]~bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "array_type",
            "constant": true,
            "dimensions": [
              "unknown_size"
            ],
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "array types: unknown multi dimension mutable",
    "def x:[1,?]bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "array_type",
            "dimensions": [
              {
                "type": "int",
                "value": 1
              },
              "unknown_size"
            ],
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "array types: unknown multi dimension immutable",
    "def x:[1,?]~bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "array_type",
            "constant": true,
            "dimensions": [
              {
                "type": "int",
                "value": 1
              },
              "unknown_size"
            ],
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "slice types: mutable",
    "def x:<>bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "slice",
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "slice types: immutable",
    "def x:<>~bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "slice",
            "constant": true,
            "child": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "array literals: explicit/array subscripting/array calls",
    "let x=bool[false,true]",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "array_call",
            "object": {
              "type": "bool"
            },
            "args": [
              {
                "type": "false"
              },
              {
                "type": "true"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "array literals: implicit",
    "let x=.[false,true]",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "array_literal",
            "children": [
              {
                "type": "false"
              },
              {
                "type": "true"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "functions: no arguments, no modifiers",
    "fn a => void none",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "return_type": {
            "type": "void_type"
          },
          "body": {
            "type": "none"
          }
        }
      ]
    }
  ],
  [
    "functions: single argument, no modifiers",
    "fn a x:any=>any x",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "args": [
            {
              "type": "arg",
              "name": "x",
              "arg_type": {
                "type": "any"
              }
            }
          ],
          "return_type": {
            "type": "any"
          },
          "body": {
            "type": "ref",
            "name": "x"
          }
        }
      ]
    }
  ],
  [
    "functions: multiple arguments, no modifiers",
    "fn a b:any,c:any=>any b+c",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "args": [
            {
              "type": "arg",
              "name": "b",
              "arg_type": {
                "type": "any"
              }
            },
            {
              "type": "arg",
              "name": "c",
              "arg_type": {
                "type": "any"
              }
            }
          ],
          "return_type": {
            "type": "any"
          },
          "body": {
            "type": "add",
            "lhs": {
              "type": "ref",
              "name": "b"
            },
            "rhs": {
              "type": "ref",
              "name": "c"
            }
          }
        }
      ]
    }
  ],
  [
    "functions: multiple arguments, no modifiers (block)",
    "fn a b:any,c:any=>any\n{==>b+c}",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "args": [
            {
              "type": "arg",
              "name": "b",
              "arg_type": {
                "type": "any"
              }
            },
            {
              "type": "arg",
              "name": "c",
              "arg_type": {
                "type": "any"
              }
            }
          ],
          "return_type": {
            "type": "any"
          },
          "body": {
            "type": "block",
            "children": [
              {
                "type": "return",
                "child": {
                  "type": "add",
                  "lhs": {
                    "type": "ref",
                    "name": "b"
                  },
                  "rhs": {
                    "type": "ref",
                    "name": "c"
                  }
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "functions: no arguments, inline modifier",
    "fn a=>void inline none",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "return_type": {
            "type": "void_type"
          },
          "flags": [
            "inline"
          ],
          "body": {
            "type": "none"
          }
        }
      ]
    }
  ],
  [
    "functions: no arguments, extern modifier",
    "fn a=>void extern none",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "return_type": {
            "type": "void_type"
          },
          "flags": [
            "extern"
          ],
          "body": {
            "type": "none"
          }
        }
      ]
    }
  ],
  [
    "functions: no arguments, export modifier",
    "fn a=>void export none",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "return_type": {
            "type": "void_type"
          },
          "flags": [
            "export"
          ],
          "body": {
            "type": "none"
          }
        }
      ]
    }
  ],
  [
    "functions: no arguments, comptime modifier",
    "fn a=>void comptime none",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "return_type": {
            "type": "void_type"
          },
          "flags": [
            "comptime"
          ],
          "body": {
            "type": "none"
          }
        }
      ]
    }
  ],
  [
    "functions: no arguments, public modifier",
    "fn a=>void public none",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "return_type": {
            "type": "void_type"
          },
          "flags": [
            "public"
          ],
          "body": {
            "type": "none"
          }
        }
      ]
    }
  ],
  [
    "functions: no arguments, private modifier",
    "fn a=>void private none",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "return_type": {
            "type": "void_type"
          },
          "flags": [
            "private"
          ],
          "body": {
            "type": "none"
          }
        }
      ]
    }
  ],
  [
    "functions: no arguments, entry modifier",
    "fn a=>void entry none",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "return_type": {
            "type": "void_type"
          },
          "flags": [
            "entry"
          ],
          "body": {
            "type": "none"
          }
        }
      ]
    }
  ],
  [
    "functions: no arguments, multiple modifiers (export entry)",
    "fn a=>void export entry none",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "a",
          "return_type": {
            "type": "void_type"
          },
          "flags": [
            "export",
            "entry"
          ],
          "body": {
            "type": "none"
          }
        }
      ]
    }
  ],
  [
    "functions: importing",
    "fn a=>void import",
    {
      "type": "struct",
      "children": [
        {
          "type": "function_import",
          "name": "a",
          "return_type": {
            "type": "void_type"
          }
        }
      ]
    }
  ],
  [
    "functions: anonymous",
    "let x=fn => void none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "anonymous_function",
            "return_type": {
              "type": "void_type"
            },
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: no arguments, implicit captures, no return type",
    "let x=||none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: one argument, implicit captures, no return type",
    "let x=|y:bool|none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "args": [
              {
                "type": "arg",
                "name": "y",
                "arg_type": {
                  "type": "bool"
                }
              }
            ],
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: multiple arguments, implicit captures, no return type",
    "let x=|y:bool,z:bool| none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "args": [
              {
                "type": "arg",
                "name": "y",
                "arg_type": {
                  "type": "bool"
                }
              },
              {
                "type": "arg",
                "name": "z",
                "arg_type": {
                  "type": "bool"
                }
              }
            ],
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: no arguments, no captures, no return type",
    "let x=||[]none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "captures": [],
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: no arguments, implicit immutable reference capture, no return type",
    "let x=||[*~]none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "captures": [
              {
                "type": "const_ref_capture_implicit"
              }
            ],
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: no arguments, implicit mutable reference capture, no return type",
    "let x=||[*]none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "captures": [
              {
                "type": "ref_capture_implicit"
              }
            ],
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: no arguments, implicit copy capture, no return type",
    "let x=||[=]none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "captures": [
              {
                "type": "copy_capture_implicit"
              }
            ],
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: no arguments, explicit immutable reference capture, no return type",
    "let x=||[*~y]none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "captures": [
              {
                "type": "const_ref_capture",
                "name": "y"
              }
            ],
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: no arguments, explicit mutable reference capture, no return type",
    "let x=||[*y]none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "captures": [
              {
                "type": "ref_capture",
                "name": "y"
              }
            ],
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: no arguments, explicit copy capture, no return type",
    "let x=||[=y]none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "captures": [
              {
                "type": "copy_capture",
                "name": "y"
              }
            ],
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: no arguments, multiple captures, no return type",
    "let x=||[*a,=b,*~]none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "captures": [
              {
                "type": "ref_capture",
                "name": "a"
              },
              {
                "type": "copy_capture",
                "name": "b"
              },
              {
                "type": "const_ref_capture_implicit"
              }
            ],
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "closures: no arguments, implicit captures, return type",
    "let x=||=>void none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "closure",
            "return_type": {
              "type": "void_type"
            },
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "function types: no arguments",
    "def x:fn()=>void",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "function_type",
            "return_type": {
              "type": "void_type"
            }
          }
        }
      ]
    }
  ],
  [
    "function types: one argument",
    "def x:fn(bool)=>void",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "function_type",
            "args": [
              {
                "type": "bool"
              }
            ],
            "return_type": {
              "type": "void_type"
            }
          }
        }
      ]
    }
  ],
  [
    "function types: multiple arguments",
    "def x:fn(bool,bool)=>void",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_def",
          "name": "x",
          "var_type": {
            "type": "function_type",
            "args": [
              {
                "type": "bool"
              },
              {
                "type": "bool"
              }
            ],
            "return_type": {
              "type": "void_type"
            }
          }
        }
      ]
    }
  ],
  [
    "generators",
    "generator x=>bool none",
    {
      "type": "struct",
      "children": [
        {
          "type": "generator",
          "name": "x",
          "return_type": {
            "type": "bool"
          },
          "body": {
            "type": "none"
          }
        }
      ]
    }
  ],
  [
    "anonymous generators",
    "let x=generator=>bool none",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "anonymous_generator",
            "return_type": {
              "type": "bool"
            },
            "body": {
              "type": "none"
            }
          }
        }
      ]
    }
  ],
  [
    "generator types",
    "let x=generator()=>bool",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "generator_type",
            "return_type": {
              "type": "bool"
            }
          }
        }
      ]
    }
  ],
  [
    "structure types: empty",
    "let p=struct",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": "struct"
        }
      ]
    }
  ],
  [
    "structure types: structure, no children, no interfaces",
    "let p=struct{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct"
          }
        }
      ]
    }
  ],
  [
    "structure types: structure, single child, no interfaces",
    "let p=struct{a:bool}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "children": [
              {
                "type": "field",
                "name": "a",
                "field_type": {
                  "type": "bool"
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "structure types: structure, multiple children, no interfaces",
    "let p=struct{a:bool,b:bool}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "children": [
              {
                "type": "field",
                "name": "a",
                "field_type": {
                  "type": "bool"
                }
              },
              {
                "type": "field",
                "name": "b",
                "field_type": {
                  "type": "bool"
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "structure types: structure, no children, single interface",
    "let p=struct impl X, {}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "interfaces": [
              {
                "type": "ref",
                "name": "X"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "structure types: structure, single child, single interface",
    "let p=struct impl X\n{a:bool}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "children": [
              {
                "type": "field",
                "name": "a",
                "field_type": {
                  "type": "bool"
                }
              }
            ],
            "interfaces": [
              {
                "type": "ref",
                "name": "X"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "structure types: structure, multiple children, single interface",
    "let p=struct impl X,{a:bool b:bool}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "children": [
              {
                "type": "field",
                "name": "a",
                "field_type": {
                  "type": "bool"
                }
              },
              {
                "type": "field",
                "name": "b",
                "field_type": {
                  "type": "bool"
                }
              }
            ],
            "interfaces": [
              {
                "type": "ref",
                "name": "X"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "structure types: structure, no children, multiple interfaces",
    "let p=struct impl X, Y\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "interfaces": [
              {
                "type": "ref",
                "name": "X"
              },
              {
                "type": "ref",
                "name": "Y"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "structure types: structure, single child, multiple interfaces",
    "let p=struct impl X Y, {a:bool}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "children": [
              {
                "type": "field",
                "name": "a",
                "field_type": {
                  "type": "bool"
                }
              }
            ],
            "interfaces": [
              {
                "type": "ref",
                "name": "X"
              },
              {
                "type": "ref",
                "name": "Y"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "structure types: structure, multiple children, multiple interfaces",
    "let p=struct impl X, Y\n{a:bool,b:bool}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "children": [
              {
                "type": "field",
                "name": "a",
                "field_type": {
                  "type": "bool"
                }
              },
              {
                "type": "field",
                "name": "b",
                "field_type": {
                  "type": "bool"
                }
              }
            ],
            "interfaces": [
              {
                "type": "ref",
                "name": "X"
              },
              {
                "type": "ref",
                "name": "Y"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "structure types: tuple, no children",
    "let p=struct()",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "tuple": true
          }
        }
      ]
    }
  ],
  [
    "structure types: tuple, single child",
    "let p=struct(bool)",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "tuple": true,
            "children": [
              "bool"
            ]
          }
        }
      ]
    }
  ],
  [
    "structure types: tuple, multiple children",
    "let p=struct(bool,bool)",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "p"
          },
          "value": {
            "type": "struct",
            "tuple": true,
            "children": [
              "bool",
              "bool"
            ]
          }
        }
      ]
    }
  ],
  [
    "mixins: single interface",
    "impl p: X,{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "mixin",
          "structure": {
            "type": "ref",
            "name": "p"
          },
          "interfaces": [
            {
              "type": "ref",
              "name": "X"
            }
          ]
        }
      ]
    }
  ],
  [
    "mixins: multiple interfaces",
    "impl p: X,Y\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "mixin",
          "structure": {
            "type": "ref",
            "name": "p"
          },
          "interfaces": [
            {
              "type": "ref",
              "name": "X"
            },
            {
              "type": "ref",
              "name": "Y"
            }
          ]
        }
      ]
    }
  ],
  [
    "interfaces: static, no interfaces",
    "let X=interface {}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "X"
          },
          "value": "interface"
        }
      ]
    }
  ],
  [
    "interfaces: static, single interface",
    "let X=interface impl Y\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "X"
          },
          "value": {
            "type": "interface",
            "interfaces": [
              {
                "type": "ref",
                "name": "Y"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "interfaces: static, multiple interfaces",
    "let X=interface impl Y,Z, {}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "X"
          },
          "value": {
            "type": "interface",
            "interfaces": [
              {
                "type": "ref",
                "name": "Y"
              },
              {
                "type": "ref",
                "name": "Z"
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "interfaces: dynamic, no interfaces",
    "let X=interface dynamic {}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "X"
          },
          "value": {
            "type": "interface",
            "dynamic": true
          }
        }
      ]
    }
  ],
  [
    "interfaces: dynamic, single interface",
    "let X=interface dynamic impl Y\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "X"
          },
          "value": {
            "type": "interface",
            "interfaces": [
              {
                "type": "ref",
                "name": "Y"
              }
            ],
            "dynamic": true
          }
        }
      ]
    }
  ],
  [
    "interfaces: dynamic, multiple interfaces",
    "let X=interface dynamic impl Y,Z, {}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "X"
          },
          "value": {
            "type": "interface",
            "interfaces": [
              {
                "type": "ref",
                "name": "Y"
              },
              {
                "type": "ref",
                "name": "Z"
              }
            ],
            "dynamic": true
          }
        }
      ]
    }
  ],
  [
    "named blocks",
    "let x = :(name){<==(name)5}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "named_block",
            "name": "name",
            "children": [
              {
                "type": "named_break",
                "name": "name",
                "value": {
                  "type": "int",
                  "value": 5
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "if expressions",
    "fn abs x: i32 => i32 if x < 0 then -x else x",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "abs",
          "args": [
            {
              "type": "arg",
              "name": "x",
              "arg_type": {
                "type": "int_type",
                "size": 32
              }
            }
          ],
          "return_type": {
            "type": "int_type",
            "size": 32
          },
          "body": {
            "type": "if",
            "condition": {
              "type": "lesser",
              "lhs": {
                "type": "ref",
                "name": "x"
              },
              "rhs": {
                "type": "int",
                "value": 0
              }
            },
            "body": {
              "type": "unary_minus",
              "child": {
                "type": "ref",
                "name": "x"
              }
            },
            "else": {
              "type": "ref",
              "name": "x"
            }
          }
        }
      ]
    }
  ],
  [
    "if unwrapping: copy",
    "let x = if y : z z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "if",
            "condition": {
              "type": "ref",
              "name": "y"
            },
            "unwrap": {
              "type": "copy_capture",
              "name": "z"
            },
            "body": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "if unwrapping: ref",
    "let x = if y : *z z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "if",
            "condition": {
              "type": "ref",
              "name": "y"
            },
            "unwrap": {
              "type": "ref_capture",
              "name": "z"
            },
            "body": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "if unwrapping: const ref",
    "let x = if y : *~z z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "if",
            "condition": {
              "type": "ref",
              "name": "y"
            },
            "unwrap": {
              "type": "const_ref_capture",
              "name": "z"
            },
            "body": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "match statements: value constraints",
    "let x = match y\n{0 => 0 1,2 => 1 3,4,5,6,7 => 2}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "match",
            "value": {
              "type": "ref",
              "name": "y"
            },
            "arms": [
              {
                "type": "match_arm",
                "matches": [
                  {
                    "type": "match_value",
                    "value": "int"
                  }
                ],
                "body": "int"
              },
              {
                "type": "match_arm",
                "matches": [
                  {
                    "type": "match_value",
                    "value": {
                      "type": "int",
                      "value": 1
                    }
                  },
                  {
                    "type": "match_value",
                    "value": {
                      "type": "int",
                      "value": 2
                    }
                  }
                ],
                "body": {
                  "type": "int",
                  "value": 1
                }
              },
              {
                "type": "match_arm",
                "matches": [
                  {
                    "type": "match_value",
                    "value": {
                      "type": "int",
                      "value": 3
                    }
                  },
                  {
                    "type": "match_value",
                    "value": {
                      "type": "int",
                      "value": 4
                    }
                  },
                  {
                    "type": "match_value",
                    "value": {
                      "type": "int",
                      "value": 5
                    }
                  },
                  {
                    "type": "match_value",
                    "value": {
                      "type": "int",
                      "value": 6
                    }
                  },
                  {
                    "type": "match_value",
                    "value": {
                      "type": "int",
                      "value": 7
                    }
                  }
                ],
                "body": {
                  "type": "int",
                  "value": 2
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "match statements: range constraint",
    "let x = match y with { 0 .. 7 => 0 }",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "match",
            "value": {
              "type": "ref",
              "name": "y"
            },
            "arms": [
              {
                "type": "match_arm",
                "matches": [
                  {
                    "type": "match_range",
                    "begin": {
                      "type": "int",
                      "value": 0
                    },
                    "end": {
                      "type": "int",
                      "value": 7
                    }
                  }
                ],
                "body": {
                  "type": "int",
                  "value": 0
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "match statements: constrain",
    "let x = match y\n{ constrain isEven => 1 _ => 0}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "match",
            "value": {
              "type": "ref",
              "name": "y"
            },
            "arms": [
              {
                "type": "match_arm",
                "matches": [
                  {
                    "type": "match_constraint",
                    "constraint": {
                      "type": "ref",
                      "name": "isEven"
                    }
                  }
                ],
                "body": {
                  "type": "int",
                  "value": 1
                }
              },
              {
                "type": "match_arm",
                "matches": [
                  "match_all"
                ],
                "body": {
                  "type": "int",
                  "value": 0
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "match statements: catchall copy",
    "let x = match y with {_ -> z => z}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "match",
            "value": {
              "type": "ref",
              "name": "y"
            },
            "arms": [
              {
                "type": "match_arm",
                "matches": [
                  "match_all"
                ],
                "store": {
                  "type": "copy_capture",
                  "name": "z"
                },
                "body": {
                  "type": "ref",
                  "name": "z"
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "match statements: catchall ref",
    "let x = match y\n{_ -> *z => z}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "match",
            "value": {
              "type": "ref",
              "name": "y"
            },
            "arms": [
              {
                "type": "match_arm",
                "matches": [
                  "match_all"
                ],
                "store": {
                  "type": "ref_capture",
                  "name": "z"
                },
                "body": {
                  "type": "ref",
                  "name": "z"
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "match statements: catchall constant ref",
    "let x = match y with {_ -> *~z => z}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "match",
            "value": {
              "type": "ref",
              "name": "y"
            },
            "arms": [
              {
                "type": "match_arm",
                "matches": [
                  "match_all"
                ],
                "store": {
                  "type": "const_ref_capture",
                  "name": "z"
                },
                "body": {
                  "type": "ref",
                  "name": "z"
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "match statements, destructing with all refs, and constraints",
    "let x = match y\n{ .{a: .(_ -> i; _ -> *j\n 0 .. 7 -> *~k); b: 1; c: constrain isEven} => 0}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "match",
            "value": {
              "type": "ref",
              "name": "y"
            },
            "arms": [
              {
                "type": "match_arm",
                "matches": [
                  {
                    "type": "destructuring_match_structure",
                    "children": {
                      "a": {
                        "type": "destructuring_match_arm",
                        "matches": [
                          {
                            "type": "destructuring_match_tuple",
                            "children": [
                              {
                                "type": "destructuring_match_arm",
                                "matches": [
                                  "match_all"
                                ],
                                "store": {
                                  "type": "copy_capture",
                                  "name": "i"
                                }
                              },
                              {
                                "type": "destructuring_match_arm",
                                "matches": [
                                  "match_all"
                                ],
                                "store": {
                                  "type": "ref_capture",
                                  "name": "j"
                                }
                              },
                              {
                                "type": "destructuring_match_arm",
                                "matches": [
                                  {
                                    "type": "match_range",
                                    "begin": {
                                      "type": "int",
                                      "value": 0
                                    },
                                    "end": {
                                      "type": "int",
                                      "value": 7
                                    }
                                  }
                                ],
                                "store": {
                                  "type": "const_ref_capture",
                                  "name": "k"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      "b": {
                        "type": "destructuring_match_arm",
                        "matches": [
                          {
                            "type": "match_value",
                            "value": {
                              "type": "int",
                              "value": 1
                            }
                          }
                        ]
                      },
                      "c": {
                        "type": "destructuring_match_arm",
                        "matches": [
                          {
                            "type": "match_constraint",
                            "constraint": {
                              "type": "ref",
                              "name": "isEven"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "body": {
                  "type": "int",
                  "value": 0
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "match statements: enum destructuring",
    "let x = match n with {.empty => 0\n.integer(0 .. 255 -> small_int) => 1\n.integer(_ -> big_int) => 2\n.add{lhs: constrain isConstant; rhs: constrain isConstant} => 3\n.add{lhs: _; rhs: _} => 4 _ => 5}",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "match",
            "value": {
              "type": "ref",
              "name": "n"
            },
            "arms": [
              {
                "type": "match_arm",
                "matches": [
                  {
                    "type": "match_value",
                    "value": {
                      "name": "empty",
                      "type": "enum_literal"
                    }
                  }
                ],
                "body": "int"
              },
              {
                "type": "match_arm",
                "matches": [
                  {
                    "type": "match_enum_tuple",
                    "enum_identifier": "integer",
                    "children": [
                      {
                        "type": "destructuring_match_arm",
                        "matches": [
                          {
                            "type": "match_range",
                            "begin": "int",
                            "end": {
                              "type": "int",
                              "value": 255
                            }
                          }
                        ],
                        "store": {
                          "type": "copy_capture",
                          "name": "small_int"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "int",
                  "value": 1
                }
              },
              {
                "type": "match_arm",
                "matches": [
                  {
                    "type": "match_enum_tuple",
                    "enum_identifier": "integer",
                    "children": [
                      {
                        "type": "destructuring_match_arm",
                        "matches": [
                          "match_all"
                        ],
                        "store": {
                          "type": "copy_capture",
                          "name": "big_int"
                        }
                      }
                    ]
                  }
                ],
                "body": {
                  "type": "int",
                  "value": 2
                }
              },
              {
                "type": "match_arm",
                "matches": [
                  {
                    "type": "match_enum_structure",
                    "enum_identifier": "add",
                    "children": {
                      "rhs": {
                        "type": "destructuring_match_arm",
                        "matches": [
                          {
                            "type": "match_constraint",
                            "constraint": {
                              "type": "ref",
                              "name": "isConstant"
                            }
                          }
                        ]
                      },
                      "lhs": {
                        "type": "destructuring_match_arm",
                        "matches": [
                          {
                            "type": "match_constraint",
                            "constraint": {
                              "type": "ref",
                              "name": "isConstant"
                            }
                          }
                        ]
                      }
                    }
                  }
                ],
                "body": {
                  "type": "int",
                  "value": 3
                }
              },
              {
                "type": "match_arm",
                "matches": [
                  {
                    "type": "match_enum_structure",
                    "enum_identifier": "add",
                    "children": {
                      "rhs": {
                        "type": "destructuring_match_arm",
                        "matches": [
                          "match_all"
                        ]
                      },
                      "lhs": {
                        "type": "destructuring_match_arm",
                        "matches": [
                          "match_all"
                        ]
                      }
                    }
                  }
                ],
                "body": {
                  "type": "int",
                  "value": 4
                }
              },
              {
                "type": "match_arm",
                "matches": [
                  "match_all"
                ],
                "body": {
                  "type": "int",
                  "value": 5
                }
              }
            ]
          }
        }
      ]
    }
  ],
  [
    "loop: no yield",
    "fn x => noreturn loop false",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "loop",
            "child": "false"
          }
        }
      ]
    }
  ],
  [
    "loop: yield",
    "fn x => bool loop <== false",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "bool",
          "body": {
            "type": "loop",
            "child": {
              "type": "break",
              "child": "false"
            }
          }
        }
      ]
    }
  ],
  [
    "while loops: no else, no continue",
    "fn x=> noreturn while true do false",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "while",
            "condition": "true",
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "while loops: else, no continue",
    "fn x=> bool while false\nfalse\nelse\ntrue",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "bool",
          "body": {
            "type": "while",
            "condition": "false",
            "body": "false",
            "else": "true"
          }
        }
      ]
    }
  ],
  [
    "while loops: no else, continue",
    "fn x=> noreturn while true do continue",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "while",
            "condition": "true",
            "body": "continue"
          }
        }
      ]
    }
  ],
  [
    "for loops: copy, no index, no filters, no maps, no else",
    "fn x => noreturn for y : z\nfalse",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: reference, no index, no filters, no maps, no else",
    "fn x => noreturn for *y : z\nfalse",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "ref_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: constant reference, no index, no filters, no maps, no else",
    "fn x => noreturn for *~y : z\nfalse",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "const_ref_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: copy, index, no filters, no maps, no else",
    "fn x => noreturn for y,i : z\nfalse\nfn x2 => noreturn for y i : z\nfalse",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "index": {
              "type": "ref",
              "name": "i"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "body": "false"
          }
        },
        {
          "type": "function",
          "name": "x2",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "index": {
              "type": "ref",
              "name": "i"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: copy, no index, single filter, no maps, no else",
    "fn x => noreturn for y : z ? isPrime do false",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "transformations": [
              {
                "type": "filter_transformation",
                "child": {
                  "type": "ref",
                  "name": "isPrime"
                }
              }
            ],
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: copy, no index, multiple filters, no maps, no else",
    "fn x => noreturn for y : z ? isPrime ? greaterThanTen do false",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "transformations": [
              {
                "type": "filter_transformation",
                "child": {
                  "type": "ref",
                  "name": "isPrime"
                }
              },
              {
                "type": "filter_transformation",
                "child": {
                  "type": "ref",
                  "name": "greaterThanTen"
                }
              }
            ],
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: copy, no index, no filters, single map, no else",
    "fn x => noreturn for y : z : square do false",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "transformations": [
              {
                "type": "map_transformation",
                "child": {
                  "type": "ref",
                  "name": "square"
                }
              }
            ],
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: copy, no index, no filters, multiple maps, no else",
    "fn x => noreturn for y : z : square : addOne do false",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "transformations": [
              {
                "type": "map_transformation",
                "child": {
                  "type": "ref",
                  "name": "square"
                }
              },
              {
                "type": "map_transformation",
                "child": {
                  "type": "ref",
                  "name": "addOne"
                }
              }
            ],
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: copy, no index, single filter, single map, no else",
    "fn x => noreturn for y : z ? isPrime : square do false",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "transformations": [
              {
                "type": "filter_transformation",
                "child": {
                  "type": "ref",
                  "name": "isPrime"
                }
              },
              {
                "type": "map_transformation",
                "child": {
                  "type": "ref",
                  "name": "square"
                }
              }
            ],
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: copy, no index, multiple filters, single map, no else",
    "fn x => noreturn for y : z ? isPrime : square ? greaterThanTen do false",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "transformations": [
              {
                "type": "filter_transformation",
                "child": {
                  "type": "ref",
                  "name": "isPrime"
                }
              },
              {
                "type": "map_transformation",
                "child": {
                  "type": "ref",
                  "name": "square"
                }
              },
              {
                "type": "filter_transformation",
                "child": {
                  "type": "ref",
                  "name": "greaterThanTen"
                }
              }
            ],
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: copy, no index, single filter, multiple maps, no else",
    "fn x => noreturn for y : z : square ? greaterThanTen : addOne do false",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "transformations": [
              {
                "type": "map_transformation",
                "child": {
                  "type": "ref",
                  "name": "square"
                }
              },
              {
                "type": "filter_transformation",
                "child": {
                  "type": "ref",
                  "name": "greaterThanTen"
                }
              },
              {
                "type": "map_transformation",
                "child": {
                  "type": "ref",
                  "name": "addOne"
                }
              }
            ],
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: copy, no index, multiple filters, multiple maps, no else",
    "fn x => noreturn for y : z ? isPrime : square ? greaterThanTen : addOne do false",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "noreturn_type",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "transformations": [
              {
                "type": "filter_transformation",
                "child": {
                  "type": "ref",
                  "name": "isPrime"
                }
              },
              {
                "type": "map_transformation",
                "child": {
                  "type": "ref",
                  "name": "square"
                }
              },
              {
                "type": "filter_transformation",
                "child": {
                  "type": "ref",
                  "name": "greaterThanTen"
                }
              },
              {
                "type": "map_transformation",
                "child": {
                  "type": "ref",
                  "name": "addOne"
                }
              }
            ],
            "body": "false"
          }
        }
      ]
    }
  ],
  [
    "for loops: copy, no index, no filters, no maps, else",
    "fn x => bool for y : z\nfalse else true",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "return_type": "bool",
          "body": {
            "type": "for",
            "capture": {
              "type": "copy_capture",
              "name": "y"
            },
            "iterable": {
              "type": "ref",
              "name": "z"
            },
            "body": "false",
            "else": "true"
          }
        }
      ]
    }
  ],
  [
    "self keyword",
    "fn x self => bool self.x",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "arguments": [
            "self"
          ],
          "return_type": "bool",
          "body": {
            "type": "subscript",
            "lhs": "self",
            "rhs": {
              "type": "ref",
              "name": "x"
            }
          }
        }
      ]
    }
  ],
  [
    "~self keyword",
    "fn x ~self => bool self.x",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "args": [
            "const_self"
          ],
          "return_type": "bool",
          "body": {
            "type": "subscript",
            "lhs": "self",
            "rhs": {
              "type": "ref",
              "name": "x"
            }
          }
        }
      ]
    }
  ],
  [
    "Self keyword",
    "fn x self => Self self",
    {
      "type": "struct",
      "children": [
        {
          "type": "function",
          "name": "x",
          "args": [
            "self"
          ],
          "return_type": "self_type",
          "body": "self"
        }
      ]
    }
  ],
  [
    "operators: () overloading",
    "operator () self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "tuple_call",
          "args": [
            "self"
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: () static overloading",
    "operator () => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "tuple_call",
          "args": [
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: [] overloading",
    "operator [] self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "array_call",
          "args": [
            "self"
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: [] static overloading",
    "operator [] => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "array_call",
          "args": [
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: {} overloading",
    "operator {} self x: any => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "object_call",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "x",
              "arg_type": "any_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: {} static overloading",
    "operator {} x: any => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "object_call",
          "args": [
            {
              "type": "fn_arg",
              "name": "x",
              "arg_type": "any_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: . overloading",
    "operator . self => *X\n&x",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "subscript",
          "args": [
            "self"
          ],
          "return_type": {
            "type": "reference",
            "child": {
              "type": "ref",
              "name": "X"
            }
          },
          "body": {
            "type": "address_of",
            "child": {
              "type": "ref",
              "name": "x"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: +x",
    "let x = +(1)",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "unary_plus",
            "child": {
              "type": "int",
              "value": 1
            }
          }
        }
      ]
    }
  ],
  [
    "operators: +x overloading",
    "operator +x self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "unary_plus",
          "args": [
            "self"
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: +x static overloading",
    "operator +x => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "unary_plus",
          "args": [
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: -x",
    "let x = -(1)",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "unary_minus",
            "child": {
              "type": "int",
              "value": 1
            }
          }
        }
      ]
    }
  ],
  [
    "operators: -x overloading",
    "operator -x self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "unary_minus",
          "args": [
            "self"
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: -x static overloading",
    "operator -x => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "unary_minus",
          "args": [
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: $",
    "let x = y$",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "dereference",
            "child": {
              "type": "ref",
              "name": "y"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: $ overloading",
    "operator $ self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "dereference",
          "args": [
            "self"
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: not",
    "let x = not y",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "not",
            "child": {
              "type": "ref",
              "name": "y"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: not overloading",
    "operator not self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "not",
          "args": [
            "self"
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: not static overloading",
    "operator not => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "not",
          "args": [
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: *",
    "let x = y*z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "multiply",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: * overloading",
    "operator * self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "multiply",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: * static overloading",
    "operator * other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "multiply",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: /",
    "let x = y/z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "divide",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: / overloading",
    "operator / self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "divide",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: / static overloading",
    "operator / other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "divide",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: %",
    "let x = y%z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "modulate",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: % overloading",
    "operator % self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "modulate",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: % static overloading",
    "operator % other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "modulate",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: +",
    "let x = y+z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "add",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: + overloading",
    "operator + self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "add",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: + static overloading",
    "operator + other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "add",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: -",
    "let x = y-z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "subtract",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: - overloading",
    "operator - self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "subtract",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: - static overloading",
    "operator - other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "subtract",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: <<",
    "let x = y<<z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "left_shift",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: << overloading",
    "operator << self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "left_shift",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: << static overloading",
    "operator << other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "left_shift",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: >>",
    "let x = y>>z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "right_shift",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: >> overloading",
    "operator >> self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "right_shift",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: >> static overloading",
    "operator >> other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "right_shift",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: <",
    "let x = y<z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "lesser",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: < overloading",
    "operator < self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "lesser",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: < static overloading",
    "operator < other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "lesser",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: >",
    "let x = y>z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "greater",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: > overloading",
    "operator > self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "greater",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: > static overloading",
    "operator > other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "greater",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: <=",
    "let x = y<=z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "lesser_equal",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: <= overloading",
    "operator <= self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "lesser_equal",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: <= static overloading",
    "operator <= other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "lesser_equal",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: >=",
    "let x = y>=z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "greater_equal",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: >= overloading",
    "operator >= self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "greater_equal",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: >= static overloading",
    "operator >= other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "greater_equal",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: ==",
    "let x = y==z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "equal",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: == overloading",
    "operator == self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "equal",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: == static overloading",
    "operator == other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "equal",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: !=",
    "let x = y!=z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "not_equal",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: != overloading",
    "operator != self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "not_equal",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: != static overloading",
    "operator != other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "not_equal",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: != static overloading",
    "operator != other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "not_equal",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: and",
    "let x = y and z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "and",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: and overloading",
    "operator and self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "and",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: and static overloading",
    "operator and other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "and",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: xor",
    "let x = y xor z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "xor",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: xor overloading",
    "operator xor self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "xor",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: xor static overloading",
    "operator xor other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "xor",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: or",
    "let x = y or z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "or",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: or overloading",
    "operator or self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "or",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: or static overloading",
    "operator or other: type => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "or",
          "args": [
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "operators: &",
    "let x = y & z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "combine",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: =",
    "fn x => void y=z",
    {
      "type": "struct",
      "children": [
        {
          "type": "var_decl",
          "def": {
            "type": "var_def",
            "name": "x"
          },
          "value": {
            "type": "or",
            "lhs": {
              "type": "ref",
              "name": "y"
            },
            "rhs": {
              "type": "ref",
              "name": "z"
            }
          }
        }
      ]
    }
  ],
  [
    "operators: or overloading",
    "operator or self, other: Self => void\n{}",
    {
      "type": "struct",
      "children": [
        {
          "type": "operator",
          "operator": "or",
          "args": [
            "self",
            {
              "type": "fn_arg",
              "name": "other",
              "arg_type": "self_type"
            }
          ],
          "return_type": "void",
          "body": "block"
        }
      ]
    }
  ],
  [
    "example full program (always last!!!)",
    "fn abs arg: f64 => f64\nif arg < 0\n-arg\nelse\narg\n\nlet HSL=struct{\nh:f64\ns:f64\nl:f64\nfn to_rgb ~self=>RGB public{\nlet c =(1-abs(2.0*self.l-1.0))*self.s\nlet x=c*(1-abs((self.h/60.0)%2.0-1.0))\nlet m=self.l-self.c/2.0\nlet h60=(self.h/60.0)@u8\nlet(rprime, gprime, bprime)=switch h60{\n0=>\n.(c,x,0.0)\n1=>\n.(x,c,0.0)\n2=>\n.(0.0,x,c)\n3=>\n.(x,0.0,c)\n4=>\n.(c,0.0,x)\n_=>\n.(0.0,0.0,0.0)\n}\n==>.(\nr:((rprime+m)*255)@u8\ng:((gprime+m)*255)@u8\nb:((bprime+m)*255)@u8\n)\n}\n}\n\nlet RGB=struct{\nr:u8\ng:u8\nb:u8\n}\n\nfn main=>u8 entry{\nlet hsl=HSL{\nh:130.0\ns:0.5\nl:0.5\n}\n\nhsl.to_rgb()\n\n==>0\n}",
    {
      "type": "struct"
    }
  ]
]