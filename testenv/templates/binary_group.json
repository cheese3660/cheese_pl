{
  ":insert": [
    [
      "expressions: %NAME% (integer-integer)",
      {
        ":template": "binary_arithmetic_simple",
        "TYPE_A": "i64",
        "TYPE_B": "i64",
        "TYPE_A_B": "i64",
        "VALUE_A": ":template!integer_one",
        "TYPE_B_B": "i64",
        "VALUE_B": ":template!integer_one",
        "OPERATION": "%OPERATION%"
      }
    ],
    [
      "expressions: %NAME% (integer-float)",
      {
        ":template": "binary_arithmetic_simple",
        "TYPE_A": "i64",
        "TYPE_B": "f64",
        "TYPE_A_B": "i64",
        "VALUE_A": ":template!integer_one",
        "TYPE_B_B": "f64",
        "VALUE_B": ":template!float_one",
        "OPERATION": "%OPERATION%"
      }
    ],
    [
      "expressions: %NAME% (integer-complex)",
      "fn main => void entry\n{let x: i64 = 1\nlet y: c64 = 1\n_=x+y}",
      "@INTEGER_COMPLEX@"
    ],
    [
      "expressions: %NAME% (float-float)",
      {
        ":template": "binary_arithmetic_simple",
        "TYPE_A": "f64",
        "TYPE_B": "f64",
        "TYPE_A_B": "f64",
        "VALUE_A": ":template!float_one",
        "TYPE_B_B": "f64",
        "VALUE_B": ":template!float_one",
        "OPERATION": "%OPERATION%"
      }
    ],
    [
      "expressions: %NAME% (float-complex)",
      "fn main => void entry\n{let x: f64 = 1\nlet y: c64 = 1\n_=x+y}",
      "@FLOAT_COMPLEX@"
    ],
    [
      "expressions: %NAME% (complex-complex)",
      "fn main => void entry\n{let x: c64 = 1\nlet y: c64 = 1\n_=x+y}",
      "@COMPLEX_COMPLEX@"
    ],
    [
      "expressions: %NAME% (function pointer-integer)",
      "import function_pointers @ l\nfn main => void entry\n{let x: i64 = 1\nlet y: i64 = 1\nlet z = l.fn_pointer_integer%OPERATION%y\n_ = z(x)}",
      {}
    ],
    [
      "expressions: %NAME% (function pointer-float)",
      "import function_pointers @ l\nfn main => void entry\n{let x: f64 = 1\nlet y: f64 = 1\nlet z = l.fn_pointer_float%OPERATION%y\n_ = z(x)}",
      {}
    ],
    [
      "expressions: %NAME% (function pointer-complex)",
      "import function_pointers @ l\nfn main => void entry\n{let x: c64 = 1\nlet y: c64 = 1\nlet z = l.fn_pointer_complex%OPERATION%y\n_ = z(x)}",
      {}
    ],
    [
      "expressions: %NAME% (function pointer-function_pointer)",
      "import function_pointers @ l\nfn main => void entry\n{let x: i64 = 1\nlet y: i64 = 1\nlet z = l.fn_pointer_integer%OPERATION%l.fn_pointer_integer\n_ = z(x,y)}",
      {}
    ]
  ]
}